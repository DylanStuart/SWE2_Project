#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <sys/types.h>
#include <sys/times.h>
#include <sys/time.h>
#include <limits.h>
#include <time.h>
#include <omp.h>


#define MAXN 2000  
int N;  

int num_threads;

volatile float A[MAXN][MAXN], B[MAXN], X[MAXN];



void gauss()
{
  int Q, R, C;  
  float M;

  printf("Computing using OpemMP.\n");

 
  for (Q = 0; Q < N - 1; Q++) {
  #pragma omp parallel for shared(A, B) private(M, R, C) num_threads(num_threads)
    for (R = Q + 1; R < N; R++) {
      M = A[R][Q] / A[Q][Q];
      for (C = Q; C < N; C++) {
        A[R][C] -= A[Q][C] * M;
      }
      B[R] -= B[Q] * M;
    }
  }
  
  for (R = N - 1; R >= 0; R--) {
    X[R] = B[R];
    for (C = N-1; C > R; C--) {
      X[R] -= A[R][C] * X[C];
    }
    X[R] /= A[R][R];
  }
}

// just time stuff from the last project
unsigned int time_seed() {
  struct timeval t;
  struct timezone tzdummy;

  gettimeofday(&t, &tzdummy);
  return (unsigned int)(t.tv_usec);
}


void parameters(int argc, char **argv) {

  int seed = 0;  
  char uid[32]; 

  
  srand(time_seed());  

  if (argc == 4) {
    seed = atoi(argv[3]);
    srand(seed);
    printf("Random seed = %i\n", seed);
  }
  if(argc >= 3) {
    num_threads = atoi(argv[2]);
  }
  if(argc == 2) {
    num_threads = 4;
  }
  printf("Number of Threads = %i\n", num_threads);
  if (argc >= 2) {
    N = atoi(argv[1]);
    if (N < 1 || N > MAXN) {
      printf("N = %i is out of range.\n", N);
      exit(0);
    }
  }
  else {
    printf("Usage: %s <matrix_dimension> <number of threads> [random seed]\n",
           argv[0]);
    exit(0);
  }

  
  printf("\nMatrix dimension N = %i.\n", N);

}

//old stuff
void initialize_inputs() {
  int R, C;

  printf("\nInitializing...\n");
  for (C = 0; C < N; C++) {
    for (R = 0; R < N; R++) {
      A[R][C] = (float)rand() / 32768.0;
    }
    B[C] = (float)rand() / 32768.0;
    X[C] = 0.0;
  }


}

//print function
void print_inputs() {
  int R, C;

  if (N < 10) {
    printf("\nA =\n\t");
    for (R = 0; R < N; R++) {
      for (C = 0; C < N; C++) {
	printf("%5.2f%s", A[R][C], (C < N-1) ? ", " : ";\n\t");
      }
    }
    printf("\nB = [");
    for (C = 0; C < N; C++) {
      printf("%5.2f%s", B[C], (C < N-1) ? "; " : "]\n");
    }
  }
}

void print_X() {
  int R;

  if (N < 10) {
    printf("\nX = [");
    for (R = 0; R < N; R++) {
      printf("%5.2f%s", X[R], (R < N-1) ? "; " : "]\n");
    }
  }
}

void main(int argc, char **argv) {
 
  struct timeval etstart, etstop;  
  struct timezone tzdummy;
  clock_t etstart2, etstop2;  
  unsigned long long usecstart, usecstop;
  struct tms cputstart, cputstop;  

  
  parameters(argc, argv);

  
  initialize_inputs();

  
  print_inputs();

 
  printf("\nStarting clock.\n");
  gettimeofday(&etstart, &tzdummy);
  etstart2 = times(&cputstart);

  
  gauss();

  
  gettimeofday(&etstop, &tzdummy);
  etstop2 = times(&cputstop);
  printf("Stopped clock.\n");
  usecstart = (unsigned long long)etstart.tv_sec * 1000000 + etstart.tv_usec;
  usecstop = (unsigned long long)etstop.tv_sec * 1000000 + etstop.tv_usec;

  
  print_X();

  
  printf("\nElapsed time = %g ms.\n",
	 (float)(usecstop - usecstart)/(float)1000);
  printf("(%g ms according to times())\n",(etstop2 - etstart2) / (float)CLOCKS_PER_SEC * 1000);
   
 
  printf("-------------------------------------------\n");

}
